name: Deploy EMI Verify App

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm install
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install:all
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Set up error handling
          set -e
          
          echo "🚀 Starting deployment process..."
          
          # Navigate to project directory
          cd /home/ubuntu/emi-verify
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main
          
          # Ensure Docker is running
          echo "🐳 Checking Docker status..."
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo "🔧 Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Set up production environment
          echo "🔧 Setting up production environment..."
          cp .env.production backend/.env || echo "No production env file found"
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm run install:all
          
          # Build frontend
          echo "🏗️ Building frontend..."
          cd frontend
          REACT_APP_API_URL=https://emiverify.insightgridanalytic.com/api npm run build
          cd ..
          
          # Stop existing containers gracefully
          echo "🛑 Stopping existing containers..."
          docker-compose down || true
          
          # Clean up Docker resources
          echo "🧹 Cleaning up Docker resources..."
          docker system prune -f || true
          
          # Rebuild and start containers
          echo "🚀 Starting containers..."
          docker-compose up -d --build
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to initialize..."
          sleep 45
          
          # Set up database
          echo "🗄️ Setting up database..."
          npm run setup-db || echo "Database setup completed or already exists"
          
          # Health checks
          echo "🏥 Running health checks..."
          
          # Check if backend is responding locally
          for i in {1..10}; do
            if curl -f http://3.227.223.115:3001/health > /dev/null 2>&1; then
              echo "✅ Backend is healthy (local)"
              break
            else
              echo "⏳ Waiting for backend... (attempt $i/10)"
              sleep 10
            fi
          done
          
          # Check production domain (with retries for DNS propagation)
          echo "🌐 Testing production domain..."
          for i in {1..5}; do
            if curl -f -k https://emiverify.insightgridanalytic.com/api/health > /dev/null 2>&1; then
              echo "✅ Production domain is accessible"
              break
            else
              echo "⏳ Waiting for domain to be accessible... (attempt $i/5)"
              sleep 15
            fi
          done
          
          # Check email verification endpoint
          if curl -f -k https://emiverify.insightgridanalytic.com/verify-email > /dev/null 2>&1; then
            echo "✅ Email verification endpoint is accessible"
          else
            echo "⚠️ Email verification endpoint check failed"
          fi
          
          # Check if database is accessible
          if docker-compose exec -T postgres pg_isready -U emi_admin > /dev/null 2>&1; then
            echo "✅ Database is ready"
          else
            echo "⚠️ Database health check failed"
          fi
          
          # Show container status
          echo "📊 Container status:"
          docker-compose ps
          
          # Show logs if there are any issues
          echo "📝 Recent logs:"
          docker-compose logs --tail=20
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Production services available at:"
          echo "   Frontend: https://emiverify.insightgridanalytic.com"
          echo "   Email Verification: https://emiverify.insightgridanalytic.com/verify-email"
          echo "   Backend API: https://emiverify.insightgridanalytic.com/api"
          echo "   PgAdmin: http://3.227.223.115:8080"

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm install
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
